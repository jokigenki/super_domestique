<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_bird</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init vars
grav = 2; // how fast player falls
horizontalSpeed = -4; // how fast player moves horizontally
verticalSpeed = 0; // how fast the player moves up/down, set when jumping
grounded = 0; // is the player on the ground
jumpAllowed = true; // can the player jump?
jumpSpeed = 0; // how fast is the player accelerating while jumping
jumpEase = 4; // how slowly the player reaches maximum jump velocity
maxJumpSpeed = 80; // the maximum jump velocity
shouldAnimate = true; // whether or not to animate
animationSpeed = image_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check collisions
var w = sprite_get_width(sp_bird);

// check for a collision with a ground object
// if colliding, set grounded to true and set verticalSpeed to 0
// if the ground object is a pothole, reset move speed
var colObject = instance_place(x + (w / 2), y + verticalSpeed, obj_ground);
if (colObject) {
    // vertical collision - road
    y = colObject.y;
    if (sign(verticalSpeed) == 1) {
        grounded = 1;
    }
    verticalSpeed = 0;
    if (colObject.potholeIndex &gt; 0) {
        obj_generator.blockMoveSpeed = obj_generator.blockMoveStartSpeed;
    }
} else {
    grounded = 0;
}

// check for collision with car
if place_meeting(x, y, obj_car) {
    obj_generator.blockMoveSpeed = obj_generator.blockMoveStartSpeed;
}

y += verticalSpeed;

// check for a collision with the stop object. If colliding, push the player
// forward until it is not colliding any more.
if place_meeting(x + horizontalSpeed, y, obj_stop) {
    xp = 0;
    while (place_meeting(x + horizontalSpeed + xp, y, obj_stop)) {
        xp += 1;
    }
    x += xp;
}
x += horizontalSpeed;

// check for collision with speed balloon
var balloonCol = instance_place(x, y, obj_speed_boost);
if (balloonCol) {
    obj_generator.blockMoveSpeed += obj_generator.blockMoveSpeedIncrement;
    with (balloonCol) {
        instance_destroy();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player input
jumpPressed = keyboard_check_pressed(vk_up);

// ease the player to maximum jump speed
if jumpPressed { 
    if (jumpAllowed &amp;&amp; jumpSpeed &lt; maxJumpSpeed)
    {
        jumpSpeed += (maxJumpSpeed - jumpSpeed) / jumpEase;
        verticalSpeed -= jumpSpeed;
    }
} else {
    jumpSpeed = 0;
    jumpAllowed = grounded;
}
verticalSpeed += grav;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
if (shouldAnimate) image_speed = animationSpeed;
else image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="13">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,63</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
